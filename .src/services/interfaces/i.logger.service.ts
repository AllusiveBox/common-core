/**
 *
 * Interface outlining the basic requirements for a LoggerService instance.
 *
 * @interface ILoggerService
 * @since Version 0.4.0
 *
 */
export interface ILoggerService {

    /**
     *
     * Flag indicating if the logs generated by the {@link ILoggerService#debug} method should be displayed.
     *
     * @type {boolean}
     * @readonly
     * @since Version 0.4.0
     *
     */
    readonly displayDebug: boolean;

    /**
     *
     * Flag indicating if the logs generated by all methods should also be displayed on the debug console.
     * <br />
     * <b>Note</b>: This does nothing if the application is not being ran in debug mode.
     *
     * @type {boolean}
     * @readonly
     * @since Version 0.4.0
     *
     */
    readonly displayOnConsole: boolean;

    /**
     *
     * Logs the provided data at the `debug` level.
     *
     * @param {unknown} args The data to log.
     * @returns {void}
     * @since Version 0.4.0
     *
     */
    debug(
        ...args: Array<unknown>
    ): void;

    /**
     *
     * Logs the provided data at the `verbose` level.
     *
     * @param {unknown} args The data to log.
     * @returns {void}
     * @since Version 0.4.0
     *
     */
    verbose(
        ...args: Array<unknown>
    ): void;

    /**
     *
     * Logs the provided data at the `info` level.
     *
     * @param {unknown} args The data to log.
     * @returns {void}
     * @since Version 0.4.0
     *
     */
    info(
        ...args: Array<unknown>
    ): void;

    /**
     *
     * Logs the provided data at the `warning` level.
     *
     * @param {unknown} args The data to log.
     * @returns {void}
     * @since Version 0.4.0
     *
     */
    warn(
        ...args: Array<unknown>
    ): void;

    /**
     *
     * Logs the provided data at the `error` level.
     *
     * @param {unknown} args The data to log.
     * @returns {void}
     * @since Version 0.4.0
     *
     */
    error(
        ...args: Array<unknown>
    ): void;

    /**
     *
     * Logs the provided data at the `fatal` level.
     * <br />
     * This method is intended to be used to report any errors that the application is unable to recover from. It is
     * assumed that, shortly after this method is called, the process will terminate.
     *
     * @returns {void}
     * @since Version 0.4.0
     *
     */
    fatal(): void;

    /**
     *
     * Logs the provided data at the `fatal` level.
     * <br />
     * This method is intended to be used to report any errors that the application is unable to recover from. It is
     * assumed that, shortly after this method is called, the process will terminate.
     *
     * @param {unknown} args The data to log.
     * @returns {void}
     * @since Version 0.4.0
     *
     */
    fatal(
        ...args: Array<unknown>
    ): void;

}